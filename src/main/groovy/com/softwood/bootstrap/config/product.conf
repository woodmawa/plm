package com.softwood.bootstrap.config

import com.softwood.portfolio.Product
import com.softwood.portfolio.ProductClass
import com.softwood.portfolio.*

import java.util.concurrent.ConcurrentLinkedQueue

// set this value to determine the order that config files will be run
// any globally required value should be set to the binding
// ensure that any dependant scripts run with higher order value than the script that
// sets the required value in the binding.  Multiple non dependant scripts can run at same level
def runConfigInOrder = 1


//setup productAttributesAndAssignment product class and some products of that class
vfPortfolio.productClasses = new ConcurrentLinkedQueue()
vfPortfolio.productClasses.metaClass.list = {delegate.toArray(ProductClass[]) }

ProductClass pclass = new ProductClass (productClass: "Node", productType: "Phone")
def phones = pclass
vfPortfolio.productClasses << pclass
pclass = new ProductClass (productClass: "Node", productType: "Network Equipment")
def router = pclass
vfPortfolio.productClasses << pclass
pclass = new ProductClass (productClass: "Service", productType: "Services")
vfPortfolio.productClasses << pclass
pclass = new ProductClass (productClass: "Network", productType: "Ethernet")
vfPortfolio.productClasses << pclass
pclass = new ProductClass (productClass: "Network", productType: "MPLS")
vfPortfolio.productClasses << pclass

//setup productAttributesAndAssignment couple of basic products
vfPortfolio.productMaster = new ConcurrentLinkedQueue()
vfPortfolio.productMaster.metaClass.list = {delegate.toArray(Product[]) }



Product product = new Product (code: "123", name:"iPhone", SKU:"ph/123", productClass:phones)
vfPortfolio.productMaster << product

product = new Product (code: "125", name:"Cisco ASR 1001-x", SKU:"productHierarchy-r/1001x", productClass:router)
vfPortfolio.productMaster << product
