package com.softwood.bootstrap.config.offering

import com.softwood.domain.offering.OfferingAttributeGroup
import com.softwood.domain.portfolio.AttributeValueListItem
import com.softwood.domain.portfolio.NamedListOfValues
import com.softwood.domain.offering.ProductOffering
import com.softwood.domain.offering.CommercialProductAttribute
import com.softwood.domain.offering.OfferingAttributeAssignment
import com.softwood.domain.portfolio.ProductClass

import java.util.concurrent.ConcurrentLinkedQueue

// set this value to determine the order that config files will be run
// any globally required value should be set to the binding
// ensure that any dependant scripts run with higher order value than the script that
// sets the required value in the binding.  Multiple non dependant scripts can run at same level
def runConfigInOrder = 2

Binding scriptBinding = getBinding()

def p = scriptBinding.vfPortfolio
println "vfPortfolio is of class : " + p.getClass()

//vfPortolfio is an expando
vfPortfolio.offeredProductsMaster = new ConcurrentLinkedQueue<ProductOffering>()

/**
 * setup offeringAttributesAndAssignment for offering
 */

//setup a mandatory MPS core offeringAttributeGroup

OfferingAttributeGroup mpsAttGroup = new OfferingAttributeGroup (groupName:"MPS Package attributes", mandatory:true)

//set up some attributes for group

def stdComAttList = []
CommercialProductAttribute cAttrib = new CommercialProductAttribute (dataType: String, name:"serviceTariff", displayName: "Service Tariff")
mpsAttGroup.add (cAttrib); stdComAttList << cAttrib

cAttrib = new CommercialProductAttribute (dataType: String, name:"term", displayName: "Contract Length")
mpsAttGroup.add (cAttrib);stdComAttList << cAttrib

cAttrib = new CommercialProductAttribute (dataType: String, name:"penalty", displayName: "Penalty")
mpsAttGroup.add (cAttrib);stdComAttList << cAttrib

cAttrib = new CommercialProductAttribute (dataType: String, name:"voiceMinutes", displayName: "Voice")
mpsAttGroup.add (cAttrib);stdComAttList << cAttrib

cAttrib = new CommercialProductAttribute (dataType: String, name:"texts", displayName: "Text")
mpsAttGroup.add (cAttrib);stdComAttList << cAttrib

cAttrib = new CommercialProductAttribute (dataType: String, name:"dataInMb", displayName: "Data")
mpsAttGroup.add (cAttrib);stdComAttList << cAttrib

cAttrib = new CommercialProductAttribute (dataType: String, name:"wifi", displayName: "Wifi")
mpsAttGroup.add (cAttrib);stdComAttList << cAttrib

cAttrib = new CommercialProductAttribute (dataType: String, name:"4g", displayName: "4G")
mpsAttGroup.add (cAttrib);stdComAttList << cAttrib

/*
 *set up voice minutes LoV for one of attributes in MPS group
 */
NamedListOfValues voiceMinutesLov = new NamedListOfValues(lovName:"voiceMinutes")
def vminutes = [0,50,100,150,200,250,300,400,500,600,700,750,800,900,1000,
               1200,1250,1500,2000,2500,3000,3500,3600,3900,4000,4200,4500,5000,6000,6500,7000,7500,8000,8500,9000,9500,
               10000,11000,12000,13000,14000,15000,16000,17000,18000,19000,20000]
//set up values and assign to the LoV
int seqNum = 1
vminutes.each {
voiceMinutesLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
}
voiceMinutesLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"Infinite")

/*
 *set up text minutes LoV for one of attributes in MPS group
 */
NamedListOfValues textMinutesLov = new NamedListOfValues(lovName:"textMinutes")
def tminutes = [0,250,500,1000,2000,3000,4000,5000,6000,10000]
//set up values and assign to the LoV
seqNum = 1
tminutes.each {
textMinutesLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
}
textMinutesLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"Infinite")

/*
 *set up data MB LoV for one of attributes in MPS group
 */
NamedListOfValues dataMBLov = new NamedListOfValues(lovName:"dataInMb")
def dataMB = [0,1,50,100,250,500,512,750,1024,2048,3072,4096,5120,6144,7168,8192,10240,25600,51200]
//set up values and assign to the LoV
seqNum = 1
dataMB.each {
dataMBLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
}
dataMBLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"Unlimited")

/*
 *set up wifi MB LoV for one of attributes in MPS group
 */
NamedListOfValues wifiMBLov = new NamedListOfValues(lovName:"wifiInMb")
def wifiMB = [0,100,250,500,512,750,1024,2048,3072,4096,5120]
//set up values and assign to the LoV
seqNum = 1
wifiMB.each {
wifiMBLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
}
dataMBLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"No")
dataMBLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"Unlimited")

/*
 *set up data cap LoVs for one of attributes in MPS group
 */
NamedListOfValues ukDataCapLov = new NamedListOfValues(lovName:"ukDataUsageCap")
NamedListOfValues euDataCapLov = new NamedListOfValues(lovName:"euDataUsageCap")
NamedListOfValues globalDataCapLov = new NamedListOfValues(lovName:"euDataUsageCap")
def dataCap = ["excluded","optional","mandatory"]

//set up values and assign to the LoV
seqNum = 1
dataCap.each {
ukDataCapLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
euDataCapLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
globalDataCapLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
}


//now assign the things to offer mapping
//vfPortfolio.offeringAttributeMappings = new ConcurrentLinkedQueue<OfferingAttributeAssignment>()

ConcurrentLinkedQueue<ProductOffering> offerings = vfPortfolio.offeredProductsMaster  //get ref from binding


//create a new package offering
def myPackage = new ProductOffering (name:'my first package', status:"draft", isPackage: true)
offerings << myPackage


OfferingAttributeAssignment oMapping = new OfferingAttributeAssignment()

myPackage.setOfferingAttributeAssignment(oMapping)   //save mapping into offering


oMapping.addAttributeGroup(mpsAttGroup) //add mandatory mps attribute group

