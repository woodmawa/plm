package com.softwood.bootstrap.config.offering

import com.softwood.domain.offering.OfferingAttributeGroup
import com.softwood.domain.portfolio.AttributeValueListItem
import com.softwood.domain.portfolio.NamedListOfValues
import com.softwood.domain.offering.ProductOffering
import com.softwood.domain.offering.CommercialProductAttribute
import com.softwood.domain.offering.OfferingAttributeAssignment
import com.softwood.domain.portfolio.ProductClass

import java.util.concurrent.ConcurrentLinkedQueue

// set this value to determine the order that config files will be run
// any globally required value should be set to the binding
// ensure that any dependant scripts run with higher order value than the script that
// sets the required value in the binding.  Multiple non dependant scripts can run at same level
def runConfigInOrder = 2

Binding scriptBinding = getBinding()


//vfPortolfio is an expando, add offeredProductsMaster as new head
vfPortfolio.offeredProductsMaster = new ConcurrentLinkedQueue<ProductOffering>()
vfPortfolio.offeredProductsMaster.metaClass.list = {delegate.toArray(ProductOffering[]) }


/**
 * setup offeringAttributesAndAssignment for offering
 */

/*
 *set up voice minutes LoV for one of attributes in MPS group
 */
NamedListOfValues voiceMinutesLov = new NamedListOfValues(lovName:"voiceMinutes")
def vminutes = [0,50,100,150,200,250,300,400,500,600,700,750,800,900,1000,
               1200,1250,1500,2000,2500,3000,3500,3600,3900,4000,4200,4500,5000,6000,6500,7000,7500,8000,8500,9000,9500,
               10000,11000,12000,13000,14000,15000,16000,17000,18000,19000,20000]
//set up values and assign to the LoV
int seqNum = 1
vminutes.each {
voiceMinutesLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
}
voiceMinutesLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"Infinite")

/*
 *set up text minutes LoV for one of attributes in MPS group
 */
NamedListOfValues textMinutesLov = new NamedListOfValues(lovName:"textMinutes")
def tminutes = [0,250,500,1000,2000,3000,4000,5000,6000,10000]
//set up values and assign to the LoV
seqNum = 1
tminutes.each {
textMinutesLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
}
textMinutesLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"Infinite")

/*
 *set up data MB LoV for one of attributes in MPS group
 */
NamedListOfValues dataMBLov = new NamedListOfValues(lovName:"dataInMb")
def dataMB = [0,1,50,100,250,500,512,750,1024,2048,3072,4096,5120,6144,7168,8192,10240,25600,51200]
//set up values and assign to the LoV
seqNum = 1
dataMB.each {
dataMBLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
}
dataMBLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"Unlimited")

/*
 *set up wifi MB LoV for one of attributes in MPS group
 */
NamedListOfValues wifiMBLov = new NamedListOfValues(lovName:"wifiInMb")
def wifiMB = [0,100,250,500,512,750,1024,2048,3072,4096,5120]
//set up values and assign to the LoV
seqNum = 1
wifiMB.each {
wifiMBLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
}
dataMBLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"No")
dataMBLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"Unlimited")


/*
 *  set up service tariffs LoV
 */
NamedListOfValues serviceTariffLoV = new NamedListOfValues(lovName:"serviceTariff")
def servTar = ["Business Sharer tariff", "Company Caller Tariff", "Occasional UsePay Monthly Tariff", "One Net Business PPM Tariff",
               "Once Net Business Tariff", "Pay Monthly CTR11 Red Tariff",  "Pay Monthly CTR12 Tariff", "Pay Monthly CTR13 Tariff",
                "Pay Monthly Tariff", "Simple Tariff Plan"]
seqNum = 1
servTar.each {
    serviceTariffLoV << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
}


/*
 *  set up contract term LoV
 */
NamedListOfValues contractTermLoV = new NamedListOfValues(lovName:"contractTerm")
def contractTerms = [0,1,3,6,12,18,24,36]
seqNum = 1
contractTerms.each {
    contractTermLoV << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
}

/*
 *set up data cap LoVs for one of attributes in MPS group
 */
NamedListOfValues ukDataCapLov = new NamedListOfValues(lovName:"ukDataUsageCap")
NamedListOfValues euDataCapLov = new NamedListOfValues(lovName:"euDataUsageCap")
NamedListOfValues globalDataCapLov = new NamedListOfValues(lovName:"euDataUsageCap")
def dataCap = ["excluded","optional","mandatory"]

//set up values and assign to the LoV
seqNum = 1
dataCap.each {
ukDataCapLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
euDataCapLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
globalDataCapLov << new AttributeValueListItem (sequenceNumber:seqNum++, value:"$it")
}

//now setup 2 groups, 'general package info' and 'MPS core' offeringAttributeGroups

OfferingAttributeGroup generalPackageInfoGroup = new OfferingAttributeGroup (groupName:"General Package attributes", mandatory:true)
OfferingAttributeGroup mpsAttGroup = new OfferingAttributeGroup (groupName:"MPS Core attributes", mandatory:true)

//set up some attributes for package info  group

CommercialProductAttribute cServTar = new CommercialProductAttribute (dataType: String, name:"serviceTariff", displayName: "Service Tariff", hasLoV:true )
generalPackageInfoGroup.addCommercialAttribute (cServTar, serviceTariffLoV)

def cTerm = new CommercialProductAttribute (dataType: String, name:"contractTerm", displayName: "Contract Length", hasLoV:true)
//generalPackageInfoGroup.addCommercialAttribute (cTerm, contractTermLoV) - do this below via assignment

//should be calculated amount really
def cPenalty = new CommercialProductAttribute (dataType: String, name:"penalty", displayName: "Penalty", hasLoV:false)
generalPackageInfoGroup.addCommercialAttribute (cPenalty)

//set up some attributes for MPS group

cAttrib = new CommercialProductAttribute (dataType: String, name:"voiceMinutes", displayName: "Voice", hasLoV:true)
mpsAttGroup.addCommercialAttribute (cAttrib, voiceMinutesLov)

cAttrib = new CommercialProductAttribute (dataType: String, name:"texts", displayName: "Text", hasLoV:true)
mpsAttGroup.addCommercialAttribute (cAttrib, textMinutesLov)

cAttrib = new CommercialProductAttribute (dataType: String, name:"dataInMb", displayName: "Data", hasLoV:true)
mpsAttGroup.addCommercialAttribute (cAttrib, dataMBLov)

cAttrib = new CommercialProductAttribute (dataType: String, name:"wifi", displayName: "Wifi", hasLoV:true)
mpsAttGroup.addCommercialAttribute (cAttrib, wifiMBLov)

cAttrib = new CommercialProductAttribute (dataType: String, name:"4g", displayName: "4G", hasLoV:true)
mpsAttGroup.addCommercialAttribute (cAttrib)


//now assign the things to offer mapping
//vfPortfolio.offeringAttributeMappings = new ConcurrentLinkedQueue<OfferingAttributeAssignment>()

ConcurrentLinkedQueue<ProductOffering> offerings = vfPortfolio.offeredProductsMaster  //get ref from binding


//create a new package offering - 1st offer
def myPackage = new ProductOffering (name:'my first package', status:"draft", isPackage: true)
offerings << myPackage

//add mps package offering - 2nd offer
def mpsPackage = new ProductOffering (name:'Indirect Only - Matched SIM Package', status:"launched", isPackage: true)
offerings << mpsPackage

OfferingAttributeAssignment oMapping = new OfferingAttributeAssignment()
OfferingAttributeAssignment mpsMapping = new OfferingAttributeAssignment()

myPackage.setOfferingAttributeAssignment(oMapping)   //save mapping into offering
mpsPackage.setOfferingAttributes(mpsMapping)

oMapping.addAttributeGroup(mpsAttGroup) //add mandatory mps attribute group

mpsMapping.addAttributeGroup(generalPackageInfoGroup)
mpsMapping.addAttributeGroup(mpsAttGroup)
assert mpsPackage.offeringAttributeAssignment.offeringAttributeGroupsList.size() == 2

mpsMapping.addProductAttribute2Group(generalPackageInfoGroup, cServTar, serviceTariffLoV)
mpsMapping.addProductAttribute2Group(generalPackageInfoGroup, cTerm, contractTermLoV)
mpsMapping.addProductAttribute2Group(generalPackageInfoGroup, cPenalty)

def iPhone = vfPortfolio.productsMaster.find {product -> product.name == 'iPhone'}
assert iPhone

//third offer
ProductOffering iPhoneOffering = new ProductOffering (name:'iPhone')
iPhoneOffering.setProductOnOffer(iPhone)
offerings << iPhoneOffering



